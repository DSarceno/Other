resultados$victorias_local[resultados$equipo == equipo] <- sum(df$home_team == equipo & df$resultado == "H")
resultados$derrotas_local[resultados$equipo == equipo] <- sum(df$home_team == equipo & df$resultado == "A")
resultados$victorias_visitante[resultados$equipo == equipo] <- sum(df$away_team == equipo & df$resultado == "A")
resultados$derrotas_visitante[resultados$equipo == equipo] <- sum(df$away_team == equipo & df$resultado == "H")
resultados$empates_local[resultados$equipo == equipo] <- sum(df$home_team == equipo & df$resultado == "T")
resultados$empates_visitante[resultados$equipo == equipo] <- sum(df$away_team == equipo & df$resultado == "T")
}
resultados$total_victorias <- resultados$victorias_local + resultados$victorias_visitante
resultados$total_derrotas <- resultados$derrotas_local + resultados$derrotas_visitante
resultados$total_empates <- resultados$empates_local + resultados$empates_visitante
resultados$porcentaje_victoria <- resultados$total_victorias / resultados$total_partidos * 100
return(resultados)
}
estadisticas <- calcular_estadisticas(copa_america)
estadisticas[order((estadisticas$total_derrotas)), ]
estadisticas[order((estadisticas$porcentaje_victoria)), columnas_importantes]
max(copa_america$date)
results$resultado <- ifelse(results$home_score > results$away_score, "H",
ifelse(results$away_score > results$home_score, "A",
"T"))
results
euro <- results[results$tournamet == "UEFA Euro"]
euro <- results[results$tournamet == "UEFA Euro",]
euro <- results[results$tournament == "UEFA Euro", ]
euro
euro_stats <- calcular_estadisticas(euro)
euro_stats
euro_stats[order(desc(euro_stats$total_partidos)), columnas_importantes]
euro_stats[order(desc(euro_stats$porcentaje_victoria)), columnas_importantes]
euro_stats[order(desc(euro_stats$total_victorias)), columnas_importantes]
mundial <- results[results$tournament == "FIFA World Cup", ]
mundial_stats <- calcular_estadisticas(mundial)
euro_stats[order(desc(euro_stats$total_victorias)), columnas_importantes]
euro_stats[order(desc(euro_stats$total_partidos)), columnas_importantes]
mundial_stats[order(desc(mundial_stats$total_partidos)), columnas_importantes]
mundial_stats[order(desc(mundial_stats$total_victorias)), columnas_importantes]
head(mundial_stats[order(desc(mundial_stats$total_victorias)), columnas_importantes])
head(mundial_stats[order(desc(mundial_stats$total_victorias)), columnas_importantes],5)
stats_mundial <- mundial_stats[order(desc(mundial_stats$total_victorias)), columnas_importantes]
stats_mundial
stats_mundial <- mundial_stats[order(desc(mundial_stats$porcentaje_victoria)), columnas_importantes]
stats_mundial
mundial
max(mundial$date)
shape(results)
nrow(results)
nrow(results)
teams <- unique(results$home_team)
team
nrow(results)
teams <- unique(results$home_team)
teams
teams <- unique(results$home_team)
#nrow(results)
teams <- unique(results$home_team)
teams
results
results[results$home_team == "Argentina", home_score]
results[results$home_team == "Argentina", 'home_score']
sum(results[results$home_team == "Argentina", 'home_score'])
calcular_estadisticas <- function(df) {
equipos <- unique(c(df$home_team, df$away_team))
resultados <- data.frame(
equipo = equipos,
total_partidos = 0,
victorias_local = 0,
victorias_visitante = 0,
derrotas_local = 0,
derrotas_visitante = 0,
empates_local = 0,
empates_visitante = 0,
total_victorias = 0,
total_derrotas = 0,
total_empates = 0,
porcentaje_victoria = 0,
goles_a_favor = 0,
goles_en_contra = 0
)
for (equipo in equipos) {
resultados$total_partidos[resultados$equipo == equipo] <- sum(df$home_team == equipo | df$away_team == equipo)
resultados$victorias_local[resultados$equipo == equipo] <- sum(df$home_team == equipo & df$resultado == "H")
resultados$derrotas_local[resultados$equipo == equipo] <- sum(df$home_team == equipo & df$resultado == "A")
resultados$victorias_visitante[resultados$equipo == equipo] <- sum(df$away_team == equipo & df$resultado == "A")
resultados$derrotas_visitante[resultados$equipo == equipo] <- sum(df$away_team == equipo & df$resultado == "H")
resultados$empates_local[resultados$equipo == equipo] <- sum(df$home_team == equipo & df$resultado == "T")
resultados$empates_visitante[resultados$equipo == equipo] <- sum(df$away_team == equipo & df$resultado == "T")
resultados$goles_a_favor[resultados$equipo == equipo] <- sum(df[df$home_team == equipo], 'home_score') + sum(df[df$away_team == equipo], 'away_score')
}
resultados$total_victorias <- resultados$victorias_local + resultados$victorias_visitante
resultados$total_derrotas <- resultados$derrotas_local + resultados$derrotas_visitante
resultados$total_empates <- resultados$empates_local + resultados$empates_visitante
resultados$porcentaje_victoria <- resultados$total_victorias / resultados$total_partidos * 100
return(resultados)
}
estadisticas <- calcular_estadisticas(copa_america)
calcular_estadisticas <- function(df) {
equipos <- unique(c(df$home_team, df$away_team))
resultados <- data.frame(
equipo = equipos,
total_partidos = 0,
victorias_local = 0,
victorias_visitante = 0,
derrotas_local = 0,
derrotas_visitante = 0,
empates_local = 0,
empates_visitante = 0,
total_victorias = 0,
total_derrotas = 0,
total_empates = 0,
porcentaje_victoria = 0,
goles_a_favor = 0,
goles_en_contra = 0
)
for (equipo in equipos) {
resultados$total_partidos[resultados$equipo == equipo] <- sum(df$home_team == equipo | df$away_team == equipo)
resultados$victorias_local[resultados$equipo == equipo] <- sum(df$home_team == equipo & df$resultado == "H")
resultados$derrotas_local[resultados$equipo == equipo] <- sum(df$home_team == equipo & df$resultado == "A")
resultados$victorias_visitante[resultados$equipo == equipo] <- sum(df$away_team == equipo & df$resultado == "A")
resultados$derrotas_visitante[resultados$equipo == equipo] <- sum(df$away_team == equipo & df$resultado == "H")
resultados$empates_local[resultados$equipo == equipo] <- sum(df$home_team == equipo & df$resultado == "T")
resultados$empates_visitante[resultados$equipo == equipo] <- sum(df$away_team == equipo & df$resultado == "T")
resultados$goles_a_favor[resultados$equipo == equipo] <- sum(df[df$home_team == equipo, 'home_score']) + sum(df[df$away_team == equipo, 'away_score'])
}
resultados$total_victorias <- resultados$victorias_local + resultados$victorias_visitante
resultados$total_derrotas <- resultados$derrotas_local + resultados$derrotas_visitante
resultados$total_empates <- resultados$empates_local + resultados$empates_visitante
resultados$porcentaje_victoria <- resultados$total_victorias / resultados$total_partidos * 100
return(resultados)
}
estadisticas <- calcular_estadisticas(copa_america)
estadisticas[order((estadisticas$total_derrotas)), ]
goles_competencia <- results[, c('home_score', 'away_score', 'tournament')]
goles_competencia
goles_competencia <- results[, c('home_score', 'away_score', 'tournament')]
goles_competencia$goles_jornada <- goles_competencia$home_score + goles_competencia$away_score
goles_competencia
grouped <- goles_competencia %>%
group_by(tournament) %>%
summarise(
goles_totales = sum(goles_jornada),
goles_por_jornada = mean(goles_jornada)
)
grouped
grouped <- goles_competencia %>%
group_by(tournament) %>%
summarise(
goles_totales = sum(goles_jornada),
goles_por_partido = mean(goles_jornada)
)
grouped[grouped$tournament == 'FIFA World Cup',]
grouped[grouped$tournament == 'UEFA Euro',]
grouped[grouped$tournament == 'Copa América',]
grouped[grouped$tournament %in% c('Copa América', 'UEFA Euro', 'FIFA World Cup'),]
grouped[grouped$tournament %in% c('Copa América', 'UEFA Euro', 'FIFA World Cup', 'CONCACAF Gold Cup'),]
grouped[grouped$tournament %in% c('Copa América', 'UEFA Euro', 'FIFA World Cup', 'Gold Cup'),]
knitr::opts_chunk$set(echo = TRUE)
circuits <- read_csv('formula1/circuits.csv')
circuits <- read_csv('formula1/circuits.csv')
constructor_results <- read_csv('formula1/constructor_results.csv')
constructor_standings <- read_csv('formula1/constructor_standings.csv')
constructors <- read_csv('formula1/constructors.csv')
driver_standings <- read_csv('formula1/driver_standings.csv')
drivers <- read_csv('formula1/drivers.csv')
lap_times <- read_csv('formula1/lap_times.csv')
pit_stops <- read_csv('formula1/pit_stops.csv')
qualifying <- read_csv('formula1/qualifying.csv')
races <- read_csv('formula1/races.csv')
results <- read_csv('formula1/results.csv')
seasons <- read_csv('formula1/seasons.csv')
sprint_results <- read_csv('formula1/sprint_results.csv')
status <- read_csv('formula1/status.csv')
circuits
# manipulacion y analisis de datos
library(dplyr) #tidyverse, manipulacion de datos
library(tidyr) #tidyverse,limpieza y reestructuracion de datos
library(data.table) # manipulacion de datos rapidos y eficientes
library(readr) # tidyverse, importacion de datos
# visualizacion de datos
library(ggplot2) # tidyverse, visualizacion de datos
library(plotly) # graficos interactivos
library(ggmap) # mapas
install.packages('ggmap')
# manipulacion y analisis de datos
library(dplyr) #tidyverse, manipulacion de datos
library(tidyr) #tidyverse,limpieza y reestructuracion de datos
library(data.table) # manipulacion de datos rapidos y eficientes
library(readr) # tidyverse, importacion de datos
# visualizacion de datos
library(ggplot2) # tidyverse, visualizacion de datos
library(plotly) # graficos interactivos
library(ggmap) # mapas
# modelado y analisis estadistico
library(caret) # creacion de modelos predictivos
library(randomForest) # algoritmos de random forest
library(e1071) # funciones para modelos de regresion y clasificacion
# dataframes para practicar
#library(iris) # diversos datasets clasicos
library(tidyverse) # herramientas de manipulacion y visualizacion de datos, incluye datasets
library(gapminder) # datos de desarrollo mundial
library(palmerpenguins) # datasets sobre especies de pinguinos, muy utilizado para demostraciones
library(nycflights13) # informacion sobre vuelos en Nueva York
# bases de datos
library(readxl)
library(RSQLite)
library(RMySQL)
library(RPostgreSQL)
library(googlesheets4)
library(haven) # bases de datos SPSS, SAS, STATA
library(DBI)
library(odbc)
library(jsonlite)
# documentacion de funciones
library(roxygen2)
library(usethis) # crea la estructura basica del paquete
library(devtools) # generar la documentacion
# da estadísticas detalaldas sobre la ejecución del código
library(microbenchmark)
map <- get_map(location = c(left = -125, bottom = 25, right = -67, top = 50), zoom = 5, maptype = "toner-lite")
map <- get_map(location = c(left = -125, bottom = 25, right = -67, top = 50), zoom = 5, maptype = "stamen_terrain")
map <- get_map(location = c(left = -125, bottom = 25, right = -67, top = 50), zoom = 5, maptype = "osm")
install.packages('leaflet')
# manipulacion y analisis de datos
library(dplyr) #tidyverse, manipulacion de datos
library(tidyr) #tidyverse,limpieza y reestructuracion de datos
library(data.table) # manipulacion de datos rapidos y eficientes
library(readr) # tidyverse, importacion de datos
# visualizacion de datos
library(ggplot2) # tidyverse, visualizacion de datos
library(plotly) # graficos interactivos
library(ggmap) # mapas
library(leaflet) # mapas
# modelado y analisis estadistico
library(caret) # creacion de modelos predictivos
library(randomForest) # algoritmos de random forest
library(e1071) # funciones para modelos de regresion y clasificacion
# dataframes para practicar
#library(iris) # diversos datasets clasicos
library(tidyverse) # herramientas de manipulacion y visualizacion de datos, incluye datasets
library(gapminder) # datos de desarrollo mundial
library(palmerpenguins) # datasets sobre especies de pinguinos, muy utilizado para demostraciones
library(nycflights13) # informacion sobre vuelos en Nueva York
# bases de datos
library(readxl)
library(RSQLite)
library(RMySQL)
library(RPostgreSQL)
library(googlesheets4)
library(haven) # bases de datos SPSS, SAS, STATA
library(DBI)
library(odbc)
library(jsonlite)
# documentacion de funciones
library(roxygen2)
library(usethis) # crea la estructura basica del paquete
library(devtools) # generar la documentacion
# da estadísticas detalaldas sobre la ejecución del código
library(microbenchmark)
leftlet(data = circuits) %>%
addTiles() %>%
addMarkers(~lng, ~lat, popup = ~location)
leaflet(data = circuits) %>%
addTiles() %>%
addMarkers(~lng, ~lat, popup = ~location)
constructor_results
constructor_standings
constructors
seasons
status
results
races
drivers
knitr::opts_chunk$set(echo = TRUE)
# manipulacion y analisis de datos
library(dplyr) #tidyverse, manipulacion de datos
library(tidyr) #tidyverse,limpieza y reestructuracion de datos
library(data.table) # manipulacion de datos rapidos y eficientes
library(readr) # tidyverse, importacion de datos
# visualizacion de datos
library(ggplot2) # tidyverse, visualizacion de datos
library(plotly) # graficos interactivos
library(ggmap) # mapas
library(leaflet) # mapas
# modelado y analisis estadistico
library(caret) # creacion de modelos predictivos
library(randomForest) # algoritmos de random forest
library(e1071) # funciones para modelos de regresion y clasificacion
# dataframes para practicar
#library(iris) # diversos datasets clasicos
library(tidyverse) # herramientas de manipulacion y visualizacion de datos, incluye datasets
library(gapminder) # datos de desarrollo mundial
library(palmerpenguins) # datasets sobre especies de pinguinos, muy utilizado para demostraciones
library(nycflights13) # informacion sobre vuelos en Nueva York
# bases de datos
library(readxl)
library(RSQLite)
library(RMySQL)
library(RPostgreSQL)
library(googlesheets4)
library(haven) # bases de datos SPSS, SAS, STATA
library(DBI)
library(odbc)
library(jsonlite)
# documentacion de funciones
library(roxygen2)
library(usethis) # crea la estructura basica del paquete
library(devtools) # generar la documentacion
# da estadísticas detalaldas sobre la ejecución del código
library(microbenchmark)
circuits <- read_csv('formula1/circuits.csv')
constructor_results <- read_csv('formula1/constructor_results.csv')
constructor_standings <- read_csv('formula1/constructor_standings.csv')
constructors <- read_csv('formula1/constructors.csv')
driver_standings <- read_csv('formula1/driver_standings.csv')
drivers <- read_csv('formula1/drivers.csv')
lap_times <- read_csv('formula1/lap_times.csv')
results1 <- left_join(results, races[, c('raceId', 'year', 'round', 'name')], by = 'raceId')
results1
results1 <- left_join(results, races[, c('raceId', 'year', 'round', 'name')], by = 'raceId')
results2 <- left_join(results1, driverId[, c('driverId' , 'driverRef')], by = 'driverId')
results1
results1 <- left_join(results, races[, c('raceId', 'year', 'round', 'name')], by = 'raceId')
results2 <- left_join(results1, drivers[, c('driverId' , 'driverRef')], by = 'driverId')
results2
results1 <- left_join(results, races[, c('raceId', 'year', 'round', 'name')], by = 'raceId')
results2 <- left_join(results1, drivers[, c('driverId' , 'driverRef')], by = 'driverId')
results3 <- left_join(results2, constructors[, c('constructorId', 'name')], by = 'constructorId')
results3
results1 <- left_join(results, races[, c('raceId', 'year', 'round', 'name')], by = 'raceId')
results2 <- left_join(results1, drivers[, c('driverId' , 'driverRef')], by = 'driverId')
results3 <- left_join(results2, constructors[, c('constructorId', 'name')], by = 'constructorId')
results4 <- left_join(results3, status, by = 'statusId')
results4
results1 <- left_join(results, races[, c('raceId', 'year', 'round', 'name')], by = 'raceId')
results2 <- left_join(results1, drivers[, c('driverId' , 'driverRef')], by = 'driverId')
results3 <- left_join(results2, constructors[, c('constructorId', 'name')], by = 'constructorId')
results4 <- left_join(results3, status, by = 'statusId')
resultados <- results4
resultados <- resultados[, !names(resultados) %in% c('resultId', 'raceId', 'driverId', 'constructorId', 'statusId')]
install.packages(c('writexl', 'openxlsx'))
# manipulacion y analisis de datos
library(dplyr) #tidyverse, manipulacion de datos
library(tidyr) #tidyverse,limpieza y reestructuracion de datos
library(data.table) # manipulacion de datos rapidos y eficientes
library(readr) # tidyverse, importacion de datos
# visualizacion de datos
library(ggplot2) # tidyverse, visualizacion de datos
library(plotly) # graficos interactivos
library(ggmap) # mapas
library(leaflet) # mapas
# modelado y analisis estadistico
library(caret) # creacion de modelos predictivos
library(randomForest) # algoritmos de random forest
library(e1071) # funciones para modelos de regresion y clasificacion
# dataframes para practicar
#library(iris) # diversos datasets clasicos
library(tidyverse) # herramientas de manipulacion y visualizacion de datos, incluye datasets
library(gapminder) # datos de desarrollo mundial
library(palmerpenguins) # datasets sobre especies de pinguinos, muy utilizado para demostraciones
library(nycflights13) # informacion sobre vuelos en Nueva York
# bases de datos
library(readxl)
library(writexl)
library(openxlsx)
library(RSQLite)
library(RMySQL)
library(RPostgreSQL)
library(googlesheets4)
library(haven) # bases de datos SPSS, SAS, STATA
library(DBI)
library(odbc)
library(jsonlite)
# documentacion de funciones
library(roxygen2)
library(usethis) # crea la estructura basica del paquete
library(devtools) # generar la documentacion
# da estadísticas detalaldas sobre la ejecución del código
library(microbenchmark)
write.xlsx(resultados, "resultados.xlsx")
lap_times
knitr::opts_chunk$set(echo = TRUE)
resultados
knitr::opts_chunk$set(echo = TRUE)
# manipulacion y analisis de datos
library(dplyr) #tidyverse, manipulacion de datos
library(tidyr) #tidyverse,limpieza y reestructuracion de datos
library(data.table) # manipulacion de datos rapidos y eficientes
library(readr) # tidyverse, importacion de datos
# visualizacion de datos
library(ggplot2) # tidyverse, visualizacion de datos
library(plotly) # graficos interactivos
library(ggmap) # mapas
library(leaflet) # mapas
# modelado y analisis estadistico
library(caret) # creacion de modelos predictivos
library(randomForest) # algoritmos de random forest
library(e1071) # funciones para modelos de regresion y clasificacion
# dataframes para practicar
#library(iris) # diversos datasets clasicos
library(tidyverse) # herramientas de manipulacion y visualizacion de datos, incluye datasets
library(gapminder) # datos de desarrollo mundial
library(palmerpenguins) # datasets sobre especies de pinguinos, muy utilizado para demostraciones
library(nycflights13) # informacion sobre vuelos en Nueva York
# bases de datos
library(readxl)
library(writexl)
library(openxlsx)
library(RSQLite)
library(RMySQL)
library(RPostgreSQL)
library(googlesheets4)
library(haven) # bases de datos SPSS, SAS, STATA
library(DBI)
library(odbc)
library(jsonlite)
# documentacion de funciones
library(roxygen2)
library(usethis) # crea la estructura basica del paquete
library(devtools) # generar la documentacion
# da estadísticas detalaldas sobre la ejecución del código
library(microbenchmark)
circuits <- read_csv('formula1/circuits.csv')
constructor_results <- read_csv('formula1/constructor_results.csv')
constructor_standings <- read_csv('formula1/constructor_standings.csv')
constructors <- read_csv('formula1/constructors.csv')
driver_standings <- read_csv('formula1/driver_standings.csv')
drivers <- read_csv('formula1/drivers.csv')
lap_times <- read_csv('formula1/lap_times.csv')
pit_stops <- read_csv('formula1/pit_stops.csv')
qualifying <- read_csv('formula1/qualifying.csv')
races <- read_csv('formula1/races.csv')
results <- read_csv('formula1/results.csv')
seasons <- read_csv('formula1/seasons.csv')
sprint_results <- read_csv('formula1/sprint_results.csv')
status <- read_csv('formula1/status.csv')
circuits
leaflet(data = circuits) %>%
addTiles() %>%
addMarkers(~lng, ~lat, popup = ~location)
constructors
races
results1 <- left_join(results, races[, c('raceId', 'year', 'round', 'name')], by = 'raceId')
results2 <- left_join(results1, drivers[, c('driverId' , 'driverRef')], by = 'driverId')
results3 <- left_join(results2, constructors[, c('constructorId', 'name')], by = 'constructorId')
results4 <- left_join(results3, status, by = 'statusId')
resultados <- results4
resultados <- resultados[, !names(resultados) %in% c('resultId', 'raceId', 'driverId', 'constructorId', 'statusId')]
write.xlsx(resultados, "resultados.xlsx")
resultados
rasultados <- resultados %>%
rename(
grand_prix = name.x,
constructor = name.y
)
resultados <- resultados %>%
rename(
grand_prix = name.x,
constructor = name.y
)
resultados
results
install.packages("usethis")
knitr::opts_chunk$set(echo = TRUE)
# manipulacion y analisis de datos
library(dplyr) #tidyverse, manipulacion de datos
library(tidyr) #tidyverse,limpieza y reestructuracion de datos
library(data.table) # manipulacion de datos rapidos y eficientes
library(readr) # tidyverse, importacion de datos
# visualizacion de datos
library(ggplot2) # tidyverse, visualizacion de datos
library(plotly) # graficos interactivos
library(ggmap) # mapas
library(leaflet) # mapas
# modelado y analisis estadistico
library(caret) # creacion de modelos predictivos
library(randomForest) # algoritmos de random forest
library(e1071) # funciones para modelos de regresion y clasificacion
# dataframes para practicar
#library(iris) # diversos datasets clasicos
library(tidyverse) # herramientas de manipulacion y visualizacion de datos, incluye datasets
library(gapminder) # datos de desarrollo mundial
library(palmerpenguins) # datasets sobre especies de pinguinos, muy utilizado para demostraciones
library(nycflights13) # informacion sobre vuelos en Nueva York
# bases de datos
library(readxl)
library(writexl)
library(openxlsx)
library(RSQLite)
library(RMySQL)
library(RPostgreSQL)
library(googlesheets4)
library(haven) # bases de datos SPSS, SAS, STATA
library(DBI)
library(odbc)
library(jsonlite)
# documentacion de funciones
library(roxygen2)
library(usethis) # crea la estructura basica del paquete
library(devtools) # generar la documentacion
# da estadísticas detalaldas sobre la ejecución del código
library(microbenchmark)
library(usethis)
clear
usethis::create_package("C:\Users\daalvarado\OneDrive - ine.gob.gt (1)\Documentos\diego_sarceño\paquete")
usethis::create_package("C:\\Users\\daalvarado\\OneDrive - ine.gob.gt (1)\\Documentos\\diego_sarceño\\paquete")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
setwd("C:/Users/daalvarado/OneDrive - ine.gob.gt (1)/Documentos/diego_sarceño/paquete")
library(devtools)
system(g++ --version)
system("g++ --version")
devtools::document()
devtools::build()
install.packages("C:/Users/daalvarado/OneDrive - ine.gob.gt (1)/Documentos/diego_sarceño/paquete_0.1.0.tar.gz", repos = NULL, type = "source")
